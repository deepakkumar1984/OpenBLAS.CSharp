// ----------------------------------------------------------------------------
// <auto-generated>
// This is autogenerated code by CppSharp.
// Do not edit this file or all your changes will be lost after re-generation.
// </auto-generated>
// ----------------------------------------------------------------------------
using System;
using System.Runtime.InteropServices;
using System.Security;

namespace OpenBLAS
{
    public unsafe partial class CBLAS
    {
        public partial struct __Internal
        {
            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_set_num_threads")]
            internal static extern void OpenblasSetNumThreads(int num_threads);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="goto_set_num_threads")]
            internal static extern void GotoSetNumThreads(int num_threads);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_get_num_threads")]
            internal static extern int OpenblasGetNumThreads();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_get_num_procs")]
            internal static extern int OpenblasGetNumProcs();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_get_config")]
            internal static extern sbyte* OpenblasGetConfig();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_get_corename")]
            internal static extern sbyte* OpenblasGetCorename();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="openblas_get_parallel")]
            internal static extern int OpenblasGetParallel();

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sdsdot")]
            internal static extern float CblasSdsdot(int n, float alpha, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsdot")]
            internal static extern double CblasDsdot(int n, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sdot")]
            internal static extern float CblasSdot(int n, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ddot")]
            internal static extern double CblasDdot(int n, double* x, int incx, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotu")]
            internal static extern global::OpenBLAS.ComplexFloat.__Internal CblasCdotu(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotc")]
            internal static extern global::OpenBLAS.ComplexFloat.__Internal CblasCdotc(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotu")]
            internal static extern void CblasZdotu(global::System.IntPtr @return, int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotc")]
            internal static extern void CblasZdotc(global::System.IntPtr @return, int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotu_sub")]
            internal static extern void CblasCdotuSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cdotc_sub")]
            internal static extern void CblasCdotcSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotu_sub")]
            internal static extern void CblasZdotuSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdotc_sub")]
            internal static extern void CblasZdotcSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sasum")]
            internal static extern float CblasSasum(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dasum")]
            internal static extern double CblasDasum(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scasum")]
            internal static extern float CblasScasum(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dzasum")]
            internal static extern double CblasDzasum(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssum")]
            internal static extern float CblasSsum(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsum")]
            internal static extern double CblasDsum(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scsum")]
            internal static extern float CblasScsum(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dzsum")]
            internal static extern double CblasDzsum(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_snrm2")]
            internal static extern float CblasSnrm2(int N, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dnrm2")]
            internal static extern double CblasDnrm2(int N, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scnrm2")]
            internal static extern float CblasScnrm2(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dznrm2")]
            internal static extern double CblasDznrm2(int N, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_isamax")]
            internal static extern ulong CblasIsamax(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idamax")]
            internal static extern ulong CblasIdamax(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icamax")]
            internal static extern ulong CblasIcamax(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izamax")]
            internal static extern ulong CblasIzamax(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_isamin")]
            internal static extern ulong CblasIsamin(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idamin")]
            internal static extern ulong CblasIdamin(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icamin")]
            internal static extern ulong CblasIcamin(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izamin")]
            internal static extern ulong CblasIzamin(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ismax")]
            internal static extern ulong CblasIsmax(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idmax")]
            internal static extern ulong CblasIdmax(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icmax")]
            internal static extern ulong CblasIcmax(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izmax")]
            internal static extern ulong CblasIzmax(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ismin")]
            internal static extern ulong CblasIsmin(int n, float* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_idmin")]
            internal static extern ulong CblasIdmin(int n, double* x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_icmin")]
            internal static extern ulong CblasIcmin(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_izmin")]
            internal static extern ulong CblasIzmin(int n, global::System.IntPtr x, int incx);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_saxpy")]
            internal static extern void CblasSaxpy(int n, float alpha, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_daxpy")]
            internal static extern void CblasDaxpy(int n, double alpha, double* x, int incx, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_caxpy")]
            internal static extern void CblasCaxpy(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zaxpy")]
            internal static extern void CblasZaxpy(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_scopy")]
            internal static extern void CblasScopy(int n, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dcopy")]
            internal static extern void CblasDcopy(int n, double* x, int incx, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ccopy")]
            internal static extern void CblasCcopy(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zcopy")]
            internal static extern void CblasZcopy(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sswap")]
            internal static extern void CblasSswap(int n, float* x, int incx, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dswap")]
            internal static extern void CblasDswap(int n, double* x, int incx, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cswap")]
            internal static extern void CblasCswap(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zswap")]
            internal static extern void CblasZswap(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srot")]
            internal static extern void CblasSrot(int N, float* X, int incX, float* Y, int incY, float c, float s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drot")]
            internal static extern void CblasDrot(int N, double* X, int incX, double* Y, int incY, double c, double s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotg")]
            internal static extern void CblasSrotg(float* a, float* b, float* c, float* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotg")]
            internal static extern void CblasDrotg(double* a, double* b, double* c, double* s);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotm")]
            internal static extern void CblasSrotm(int N, float* X, int incX, float* Y, int incY, float* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotm")]
            internal static extern void CblasDrotm(int N, double* X, int incX, double* Y, int incY, double* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_srotmg")]
            internal static extern void CblasSrotmg(float* d1, float* d2, float* b1, float b2, float* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_drotmg")]
            internal static extern void CblasDrotmg(double* d1, double* d2, double* b1, double b2, double* P);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sscal")]
            internal static extern void CblasSscal(int N, float alpha, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dscal")]
            internal static extern void CblasDscal(int N, double alpha, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cscal")]
            internal static extern void CblasCscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zscal")]
            internal static extern void CblasZscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csscal")]
            internal static extern void CblasCsscal(int N, float alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zdscal")]
            internal static extern void CblasZdscal(int N, double alpha, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemv")]
            internal static extern void CblasSgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, float alpha, float* a, int lda, float* x, int incx, float beta, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemv")]
            internal static extern void CblasDgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, double alpha, double* a, int lda, double* x, int incx, double beta, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemv")]
            internal static extern void CblasCgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, global::System.IntPtr alpha, global::System.IntPtr a, int lda, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemv")]
            internal static extern void CblasZgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, global::System.IntPtr alpha, global::System.IntPtr a, int lda, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sger")]
            internal static extern void CblasSger(global::OpenBLAS.CBLAS_ORDER order, int M, int N, float alpha, float* X, int incX, float* Y, int incY, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dger")]
            internal static extern void CblasDger(global::OpenBLAS.CBLAS_ORDER order, int M, int N, double alpha, double* X, int incX, double* Y, int incY, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgeru")]
            internal static extern void CblasCgeru(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgerc")]
            internal static extern void CblasCgerc(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgeru")]
            internal static extern void CblasZgeru(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgerc")]
            internal static extern void CblasZgerc(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strsv")]
            internal static extern void CblasStrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrsv")]
            internal static extern void CblasDtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrsv")]
            internal static extern void CblasCtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrsv")]
            internal static extern void CblasZtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strmv")]
            internal static extern void CblasStrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrmv")]
            internal static extern void CblasDtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrmv")]
            internal static extern void CblasCtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrmv")]
            internal static extern void CblasZtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr")]
            internal static extern void CblasSsyr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr")]
            internal static extern void CblasDsyr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher")]
            internal static extern void CblasCher(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher")]
            internal static extern void CblasZher(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr2")]
            internal static extern void CblasSsyr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Y, int incY, float* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr2")]
            internal static extern void CblasDsyr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Y, int incY, double* A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher2")]
            internal static extern void CblasCher2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher2")]
            internal static extern void CblasZher2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgbmv")]
            internal static extern void CblasSgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgbmv")]
            internal static extern void CblasDgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgbmv")]
            internal static extern void CblasCgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgbmv")]
            internal static extern void CblasZgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssbmv")]
            internal static extern void CblasSsbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsbmv")]
            internal static extern void CblasDsbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stbmv")]
            internal static extern void CblasStbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtbmv")]
            internal static extern void CblasDtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctbmv")]
            internal static extern void CblasCtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztbmv")]
            internal static extern void CblasZtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stbsv")]
            internal static extern void CblasStbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, float* A, int lda, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtbsv")]
            internal static extern void CblasDtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, double* A, int lda, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctbsv")]
            internal static extern void CblasCtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztbsv")]
            internal static extern void CblasZtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stpmv")]
            internal static extern void CblasStpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, float* Ap, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtpmv")]
            internal static extern void CblasDtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, double* Ap, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctpmv")]
            internal static extern void CblasCtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztpmv")]
            internal static extern void CblasZtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_stpsv")]
            internal static extern void CblasStpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, float* Ap, float* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtpsv")]
            internal static extern void CblasDtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, double* Ap, double* X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctpsv")]
            internal static extern void CblasCtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztpsv")]
            internal static extern void CblasZtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssymv")]
            internal static extern void CblasSsymv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* A, int lda, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsymv")]
            internal static extern void CblasDsymv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* A, int lda, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chemv")]
            internal static extern void CblasChemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhemv")]
            internal static extern void CblasZhemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspmv")]
            internal static extern void CblasSspmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* Ap, float* X, int incX, float beta, float* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspmv")]
            internal static extern void CblasDspmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* Ap, double* X, int incX, double beta, double* Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspr")]
            internal static extern void CblasSspr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspr")]
            internal static extern void CblasDspr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpr")]
            internal static extern void CblasChpr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpr")]
            internal static extern void CblasZhpr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sspr2")]
            internal static extern void CblasSspr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, float* X, int incX, float* Y, int incY, float* A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dspr2")]
            internal static extern void CblasDspr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, double* X, int incX, double* Y, int incY, double* A);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpr2")]
            internal static extern void CblasChpr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpr2")]
            internal static extern void CblasZhpr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chbmv")]
            internal static extern void CblasChbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhbmv")]
            internal static extern void CblasZhbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chpmv")]
            internal static extern void CblasChpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhpmv")]
            internal static extern void CblasZhpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgemm")]
            internal static extern void CblasSgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgemm")]
            internal static extern void CblasDgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm")]
            internal static extern void CblasCgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenBLAS", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgemm3m")]
            internal static extern void CblasCgemm3m(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm")]
            internal static extern void CblasZgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenBLAS", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgemm3m")]
            internal static extern void CblasZgemm3m(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssymm")]
            internal static extern void CblasSsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsymm")]
            internal static extern void CblasDsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csymm")]
            internal static extern void CblasCsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsymm")]
            internal static extern void CblasZsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyrk")]
            internal static extern void CblasSsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, float* A, int lda, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyrk")]
            internal static extern void CblasDsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, double* A, int lda, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csyrk")]
            internal static extern void CblasCsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsyrk")]
            internal static extern void CblasZsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ssyr2k")]
            internal static extern void CblasSsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, float* A, int lda, float* B, int ldb, float beta, float* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dsyr2k")]
            internal static extern void CblasDsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, double* A, int lda, double* B, int ldb, double beta, double* C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_csyr2k")]
            internal static extern void CblasCsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zsyr2k")]
            internal static extern void CblasZsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strmm")]
            internal static extern void CblasStrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, float alpha, float* A, int lda, float* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrmm")]
            internal static extern void CblasDtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, double alpha, double* A, int lda, double* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrmm")]
            internal static extern void CblasCtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrmm")]
            internal static extern void CblasZtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_strsm")]
            internal static extern void CblasStrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, float alpha, float* A, int lda, float* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dtrsm")]
            internal static extern void CblasDtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, double alpha, double* A, int lda, double* B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ctrsm")]
            internal static extern void CblasCtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_ztrsm")]
            internal static extern void CblasZtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_chemm")]
            internal static extern void CblasChemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zhemm")]
            internal static extern void CblasZhemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cherk")]
            internal static extern void CblasCherk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, global::System.IntPtr A, int lda, float beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zherk")]
            internal static extern void CblasZherk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, global::System.IntPtr A, int lda, double beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cher2k")]
            internal static extern void CblasCher2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, float beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zher2k")]
            internal static extern void CblasZher2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, double beta, global::System.IntPtr C, int ldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("OpenBLAS", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_xerbla")]
            internal static extern void CblasXerbla(int p, sbyte* rout, sbyte* form);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_saxpby")]
            internal static extern void CblasSaxpby(int n, float alpha, float* x, int incx, float beta, float* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_daxpby")]
            internal static extern void CblasDaxpby(int n, double alpha, double* x, int incx, double beta, double* y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_caxpby")]
            internal static extern void CblasCaxpby(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zaxpby")]
            internal static extern void CblasZaxpby(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_somatcopy")]
            internal static extern void CblasSomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float calpha, float* a, int clda, float* b, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_domatcopy")]
            internal static extern void CblasDomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double calpha, double* a, int clda, double* b, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_comatcopy")]
            internal static extern void CblasComatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float* calpha, float* a, int clda, float* b, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zomatcopy")]
            internal static extern void CblasZomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double* calpha, double* a, int clda, double* b, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_simatcopy")]
            internal static extern void CblasSimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float calpha, float* a, int clda, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dimatcopy")]
            internal static extern void CblasDimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double calpha, double* a, int clda, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cimatcopy")]
            internal static extern void CblasCimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float* calpha, float* a, int clda, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zimatcopy")]
            internal static extern void CblasZimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double* calpha, double* a, int clda, int cldb);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_sgeadd")]
            internal static extern void CblasSgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, float calpha, float* a, int clda, float cbeta, float* c, int cldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_dgeadd")]
            internal static extern void CblasDgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, double calpha, double* a, int clda, double cbeta, double* c, int cldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_cgeadd")]
            internal static extern void CblasCgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, float* calpha, float* a, int clda, float* cbeta, float* c, int cldc);

            [SuppressUnmanagedCodeSecurity]
            [DllImport("openblas", CallingConvention = global::System.Runtime.InteropServices.CallingConvention.Cdecl,
                EntryPoint="cblas_zgeadd")]
            internal static extern void CblasZgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, double* calpha, double* a, int clda, double* cbeta, double* c, int cldc);
        }

        public static void OpenblasSetNumThreads(int num_threads)
        {
            __Internal.OpenblasSetNumThreads(num_threads);
        }

        public static void GotoSetNumThreads(int num_threads)
        {
            __Internal.GotoSetNumThreads(num_threads);
        }

        public static int OpenblasGetNumThreads()
        {
            var __ret = __Internal.OpenblasGetNumThreads();
            return __ret;
        }

        public static int OpenblasGetNumProcs()
        {
            var __ret = __Internal.OpenblasGetNumProcs();
            return __ret;
        }

        public static sbyte* OpenblasGetConfig()
        {
            var __ret = __Internal.OpenblasGetConfig();
            return __ret;
        }

        public static sbyte* OpenblasGetCorename()
        {
            var __ret = __Internal.OpenblasGetCorename();
            return __ret;
        }

        public static int OpenblasGetParallel()
        {
            var __ret = __Internal.OpenblasGetParallel();
            return __ret;
        }

        public static float CblasSdsdot(int n, float alpha, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (float* __y4 = &y)
                {
                    var __arg4 = __y4;
                    var __ret = __Internal.CblasSdsdot(n, alpha, __arg2, incx, __arg4, incy);
                    return __ret;
                }
            }
        }

        public static double CblasDsdot(int n, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y3 = &y)
                {
                    var __arg3 = __y3;
                    var __ret = __Internal.CblasDsdot(n, __arg1, incx, __arg3, incy);
                    return __ret;
                }
            }
        }

        public static float CblasSdot(int n, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y3 = &y)
                {
                    var __arg3 = __y3;
                    var __ret = __Internal.CblasSdot(n, __arg1, incx, __arg3, incy);
                    return __ret;
                }
            }
        }

        public static double CblasDdot(int n, ref double x, int incx, ref double y, int incy)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (double* __y3 = &y)
                {
                    var __arg3 = __y3;
                    var __ret = __Internal.CblasDdot(n, __arg1, incx, __arg3, incy);
                    return __ret;
                }
            }
        }

        public static global::OpenBLAS.ComplexFloat CblasCdotu(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            var __ret = __Internal.CblasCdotu(n, x, incx, y, incy);
            return global::OpenBLAS.ComplexFloat.__CreateInstance(__ret);
        }

        public static global::OpenBLAS.ComplexFloat CblasCdotc(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            var __ret = __Internal.CblasCdotc(n, x, incx, y, incy);
            return global::OpenBLAS.ComplexFloat.__CreateInstance(__ret);
        }

        public static global::OpenBLAS.ComplexDouble CblasZdotu(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            var __ret = new global::OpenBLAS.ComplexDouble.__Internal();
            __Internal.CblasZdotu(new IntPtr(&__ret), n, x, incx, y, incy);
            return global::OpenBLAS.ComplexDouble.__CreateInstance(__ret);
        }

        public static global::OpenBLAS.ComplexDouble CblasZdotc(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            var __ret = new global::OpenBLAS.ComplexDouble.__Internal();
            __Internal.CblasZdotc(new IntPtr(&__ret), n, x, incx, y, incy);
            return global::OpenBLAS.ComplexDouble.__CreateInstance(__ret);
        }

        public static void CblasCdotuSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret)
        {
            __Internal.CblasCdotuSub(n, x, incx, y, incy, ret);
        }

        public static void CblasCdotcSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret)
        {
            __Internal.CblasCdotcSub(n, x, incx, y, incy, ret);
        }

        public static void CblasZdotuSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret)
        {
            __Internal.CblasZdotuSub(n, x, incx, y, incy, ret);
        }

        public static void CblasZdotcSub(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy, global::System.IntPtr ret)
        {
            __Internal.CblasZdotcSub(n, x, incx, y, incy, ret);
        }

        public static float CblasSasum(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasSasum(n, __arg1, incx);
                return __ret;
            }
        }

        public static double CblasDasum(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasDasum(n, __arg1, incx);
                return __ret;
            }
        }

        public static float CblasScasum(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasScasum(n, x, incx);
            return __ret;
        }

        public static double CblasDzasum(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasDzasum(n, x, incx);
            return __ret;
        }

        public static float CblasSsum(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasSsum(n, __arg1, incx);
                return __ret;
            }
        }

        public static double CblasDsum(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasDsum(n, __arg1, incx);
                return __ret;
            }
        }

        public static float CblasScsum(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasScsum(n, x, incx);
            return __ret;
        }

        public static double CblasDzsum(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasDzsum(n, x, incx);
            return __ret;
        }

        public static float CblasSnrm2(int N, ref float X, int incX)
        {
            fixed (float* __X1 = &X)
            {
                var __arg1 = __X1;
                var __ret = __Internal.CblasSnrm2(N, __arg1, incX);
                return __ret;
            }
        }

        public static double CblasDnrm2(int N, ref double X, int incX)
        {
            fixed (double* __X1 = &X)
            {
                var __arg1 = __X1;
                var __ret = __Internal.CblasDnrm2(N, __arg1, incX);
                return __ret;
            }
        }

        public static float CblasScnrm2(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.CblasScnrm2(N, X, incX);
            return __ret;
        }

        public static double CblasDznrm2(int N, global::System.IntPtr X, int incX)
        {
            var __ret = __Internal.CblasDznrm2(N, X, incX);
            return __ret;
        }

        public static ulong CblasIsamax(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIsamax(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIdamax(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIdamax(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIcamax(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIcamax(n, x, incx);
            return __ret;
        }

        public static ulong CblasIzamax(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIzamax(n, x, incx);
            return __ret;
        }

        public static ulong CblasIsamin(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIsamin(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIdamin(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIdamin(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIcamin(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIcamin(n, x, incx);
            return __ret;
        }

        public static ulong CblasIzamin(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIzamin(n, x, incx);
            return __ret;
        }

        public static ulong CblasIsmax(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIsmax(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIdmax(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIdmax(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIcmax(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIcmax(n, x, incx);
            return __ret;
        }

        public static ulong CblasIzmax(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIzmax(n, x, incx);
            return __ret;
        }

        public static ulong CblasIsmin(int n, ref float x, int incx)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIsmin(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIdmin(int n, ref double x, int incx)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                var __ret = __Internal.CblasIdmin(n, __arg1, incx);
                return __ret;
            }
        }

        public static ulong CblasIcmin(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIcmin(n, x, incx);
            return __ret;
        }

        public static ulong CblasIzmin(int n, global::System.IntPtr x, int incx)
        {
            var __ret = __Internal.CblasIzmin(n, x, incx);
            return __ret;
        }

        public static void CblasSaxpy(int n, float alpha, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (float* __y4 = &y)
                {
                    var __arg4 = __y4;
                    __Internal.CblasSaxpy(n, alpha, __arg2, incx, __arg4, incy);
                }
            }
        }

        public static void CblasDaxpy(int n, double alpha, ref double x, int incx, ref double y, int incy)
        {
            fixed (double* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (double* __y4 = &y)
                {
                    var __arg4 = __y4;
                    __Internal.CblasDaxpy(n, alpha, __arg2, incx, __arg4, incy);
                }
            }
        }

        public static void CblasCaxpy(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasCaxpy(n, alpha, x, incx, y, incy);
        }

        public static void CblasZaxpy(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasZaxpy(n, alpha, x, incx, y, incy);
        }

        public static void CblasScopy(int n, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y3 = &y)
                {
                    var __arg3 = __y3;
                    __Internal.CblasScopy(n, __arg1, incx, __arg3, incy);
                }
            }
        }

        public static void CblasDcopy(int n, ref double x, int incx, ref double y, int incy)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (double* __y3 = &y)
                {
                    var __arg3 = __y3;
                    __Internal.CblasDcopy(n, __arg1, incx, __arg3, incy);
                }
            }
        }

        public static void CblasCcopy(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasCcopy(n, x, incx, y, incy);
        }

        public static void CblasZcopy(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasZcopy(n, x, incx, y, incy);
        }

        public static void CblasSswap(int n, ref float x, int incx, ref float y, int incy)
        {
            fixed (float* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (float* __y3 = &y)
                {
                    var __arg3 = __y3;
                    __Internal.CblasSswap(n, __arg1, incx, __arg3, incy);
                }
            }
        }

        public static void CblasDswap(int n, ref double x, int incx, ref double y, int incy)
        {
            fixed (double* __x1 = &x)
            {
                var __arg1 = __x1;
                fixed (double* __y3 = &y)
                {
                    var __arg3 = __y3;
                    __Internal.CblasDswap(n, __arg1, incx, __arg3, incy);
                }
            }
        }

        public static void CblasCswap(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasCswap(n, x, incx, y, incy);
        }

        public static void CblasZswap(int n, global::System.IntPtr x, int incx, global::System.IntPtr y, int incy)
        {
            __Internal.CblasZswap(n, x, incx, y, incy);
        }

        public static void CblasSrot(int N, ref float X, int incX, ref float Y, int incY, float c, float s)
        {
            fixed (float* __X1 = &X)
            {
                var __arg1 = __X1;
                fixed (float* __Y3 = &Y)
                {
                    var __arg3 = __Y3;
                    __Internal.CblasSrot(N, __arg1, incX, __arg3, incY, c, s);
                }
            }
        }

        public static void CblasDrot(int N, ref double X, int incX, ref double Y, int incY, double c, double s)
        {
            fixed (double* __X1 = &X)
            {
                var __arg1 = __X1;
                fixed (double* __Y3 = &Y)
                {
                    var __arg3 = __Y3;
                    __Internal.CblasDrot(N, __arg1, incX, __arg3, incY, c, s);
                }
            }
        }

        public static void CblasSrotg(ref float a, ref float b, ref float c, ref float s)
        {
            fixed (float* __a0 = &a)
            {
                var __arg0 = __a0;
                fixed (float* __b1 = &b)
                {
                    var __arg1 = __b1;
                    fixed (float* __c2 = &c)
                    {
                        var __arg2 = __c2;
                        fixed (float* __s3 = &s)
                        {
                            var __arg3 = __s3;
                            __Internal.CblasSrotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void CblasDrotg(ref double a, ref double b, ref double c, ref double s)
        {
            fixed (double* __a0 = &a)
            {
                var __arg0 = __a0;
                fixed (double* __b1 = &b)
                {
                    var __arg1 = __b1;
                    fixed (double* __c2 = &c)
                    {
                        var __arg2 = __c2;
                        fixed (double* __s3 = &s)
                        {
                            var __arg3 = __s3;
                            __Internal.CblasDrotg(__arg0, __arg1, __arg2, __arg3);
                        }
                    }
                }
            }
        }

        public static void CblasSrotm(int N, ref float X, int incX, ref float Y, int incY, ref float P)
        {
            fixed (float* __X1 = &X)
            {
                var __arg1 = __X1;
                fixed (float* __Y3 = &Y)
                {
                    var __arg3 = __Y3;
                    fixed (float* __P5 = &P)
                    {
                        var __arg5 = __P5;
                        __Internal.CblasSrotm(N, __arg1, incX, __arg3, incY, __arg5);
                    }
                }
            }
        }

        public static void CblasDrotm(int N, ref double X, int incX, ref double Y, int incY, ref double P)
        {
            fixed (double* __X1 = &X)
            {
                var __arg1 = __X1;
                fixed (double* __Y3 = &Y)
                {
                    var __arg3 = __Y3;
                    fixed (double* __P5 = &P)
                    {
                        var __arg5 = __P5;
                        __Internal.CblasDrotm(N, __arg1, incX, __arg3, incY, __arg5);
                    }
                }
            }
        }

        public static void CblasSrotmg(ref float d1, ref float d2, ref float b1, float b2, ref float P)
        {
            fixed (float* __d10 = &d1)
            {
                var __arg0 = __d10;
                fixed (float* __d21 = &d2)
                {
                    var __arg1 = __d21;
                    fixed (float* __b12 = &b1)
                    {
                        var __arg2 = __b12;
                        fixed (float* __P4 = &P)
                        {
                            var __arg4 = __P4;
                            __Internal.CblasSrotmg(__arg0, __arg1, __arg2, b2, __arg4);
                        }
                    }
                }
            }
        }

        public static void CblasDrotmg(ref double d1, ref double d2, ref double b1, double b2, ref double P)
        {
            fixed (double* __d10 = &d1)
            {
                var __arg0 = __d10;
                fixed (double* __d21 = &d2)
                {
                    var __arg1 = __d21;
                    fixed (double* __b12 = &b1)
                    {
                        var __arg2 = __b12;
                        fixed (double* __P4 = &P)
                        {
                            var __arg4 = __P4;
                            __Internal.CblasDrotmg(__arg0, __arg1, __arg2, b2, __arg4);
                        }
                    }
                }
            }
        }

        public static void CblasSscal(int N, float alpha, ref float X, int incX)
        {
            fixed (float* __X2 = &X)
            {
                var __arg2 = __X2;
                __Internal.CblasSscal(N, alpha, __arg2, incX);
            }
        }

        public static void CblasDscal(int N, double alpha, ref double X, int incX)
        {
            fixed (double* __X2 = &X)
            {
                var __arg2 = __X2;
                __Internal.CblasDscal(N, alpha, __arg2, incX);
            }
        }

        public static void CblasCscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCscal(N, alpha, X, incX);
        }

        public static void CblasZscal(int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZscal(N, alpha, X, incX);
        }

        public static void CblasCsscal(int N, float alpha, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCsscal(N, alpha, X, incX);
        }

        public static void CblasZdscal(int N, double alpha, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZdscal(N, alpha, X, incX);
        }

        public static void CblasSgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, float alpha, ref float a, int lda, ref float x, int incx, float beta, ref float y, int incy)
        {
            fixed (float* __a5 = &a)
            {
                var __arg5 = __a5;
                fixed (float* __x7 = &x)
                {
                    var __arg7 = __x7;
                    fixed (float* __y10 = &y)
                    {
                        var __arg10 = __y10;
                        __Internal.CblasSgemv(order, trans, m, n, alpha, __arg5, lda, __arg7, incx, beta, __arg10, incy);
                    }
                }
            }
        }

        public static void CblasDgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, double alpha, ref double a, int lda, ref double x, int incx, double beta, ref double y, int incy)
        {
            fixed (double* __a5 = &a)
            {
                var __arg5 = __a5;
                fixed (double* __x7 = &x)
                {
                    var __arg7 = __x7;
                    fixed (double* __y10 = &y)
                    {
                        var __arg10 = __y10;
                        __Internal.CblasDgemv(order, trans, m, n, alpha, __arg5, lda, __arg7, incx, beta, __arg10, incy);
                    }
                }
            }
        }

        public static void CblasCgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, global::System.IntPtr alpha, global::System.IntPtr a, int lda, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy)
        {
            __Internal.CblasCgemv(order, trans, m, n, alpha, a, lda, x, incx, beta, y, incy);
        }

        public static void CblasZgemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE trans, int m, int n, global::System.IntPtr alpha, global::System.IntPtr a, int lda, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy)
        {
            __Internal.CblasZgemv(order, trans, m, n, alpha, a, lda, x, incx, beta, y, incy);
        }

        public static void CblasSger(global::OpenBLAS.CBLAS_ORDER order, int M, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A, int lda)
        {
            fixed (float* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (float* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (float* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasSger(order, M, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void CblasDger(global::OpenBLAS.CBLAS_ORDER order, int M, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A, int lda)
        {
            fixed (double* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (double* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (double* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasDger(order, M, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void CblasCgeru(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasCgeru(order, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasCgerc(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasCgerc(order, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasZgeru(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasZgeru(order, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasZgerc(global::OpenBLAS.CBLAS_ORDER order, int M, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasZgerc(order, M, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasStrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (float* __X7 = &X)
                {
                    var __arg7 = __X7;
                    __Internal.CblasStrsv(order, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void CblasDtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (double* __X7 = &X)
                {
                    var __arg7 = __X7;
                    __Internal.CblasDtrsv(order, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void CblasCtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtrsv(order, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void CblasZtrsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtrsv(order, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void CblasStrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (float* __X7 = &X)
                {
                    var __arg7 = __X7;
                    __Internal.CblasStrmv(order, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void CblasDtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (double* __X7 = &X)
                {
                    var __arg7 = __X7;
                    __Internal.CblasDtrmv(order, Uplo, TransA, Diag, N, __arg5, lda, __arg7, incX);
                }
            }
        }

        public static void CblasCtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtrmv(order, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void CblasZtrmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtrmv(order, Uplo, TransA, Diag, N, A, lda, X, incX);
        }

        public static void CblasSsyr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float A, int lda)
        {
            fixed (float* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (float* __A6 = &A)
                {
                    var __arg6 = __A6;
                    __Internal.CblasSsyr(order, Uplo, N, alpha, __arg4, incX, __arg6, lda);
                }
            }
        }

        public static void CblasDsyr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double A, int lda)
        {
            fixed (double* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (double* __A6 = &A)
                {
                    var __arg6 = __A6;
                    __Internal.CblasDsyr(order, Uplo, N, alpha, __arg4, incX, __arg6, lda);
                }
            }
        }

        public static void CblasCher(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda)
        {
            __Internal.CblasCher(order, Uplo, N, alpha, X, incX, A, lda);
        }

        public static void CblasZher(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A, int lda)
        {
            __Internal.CblasZher(order, Uplo, N, alpha, X, incX, A, lda);
        }

        public static void CblasSsyr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A, int lda)
        {
            fixed (float* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (float* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (float* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasSsyr2(order, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void CblasDsyr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A, int lda)
        {
            fixed (double* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (double* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (double* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasDsyr2(order, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8, lda);
                    }
                }
            }
        }

        public static void CblasCher2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasCher2(order, Uplo, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasZher2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr A, int lda)
        {
            __Internal.CblasZher2(order, Uplo, N, alpha, X, incX, Y, incY, A, lda);
        }

        public static void CblasSgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __A7 = &A)
            {
                var __arg7 = __A7;
                fixed (float* __X9 = &X)
                {
                    var __arg9 = __X9;
                    fixed (float* __Y12 = &Y)
                    {
                        var __arg12 = __Y12;
                        __Internal.CblasSgbmv(order, TransA, M, N, KL, KU, alpha, __arg7, lda, __arg9, incX, beta, __arg12, incY);
                    }
                }
            }
        }

        public static void CblasDgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __A7 = &A)
            {
                var __arg7 = __A7;
                fixed (double* __X9 = &X)
                {
                    var __arg9 = __X9;
                    fixed (double* __Y12 = &Y)
                    {
                        var __arg12 = __Y12;
                        __Internal.CblasDgbmv(order, TransA, M, N, KL, KU, alpha, __arg7, lda, __arg9, incX, beta, __arg12, incY);
                    }
                }
            }
        }

        public static void CblasCgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasCgbmv(order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasZgbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, int M, int N, int KL, int KU, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasZgbmv(order, TransA, M, N, KL, KU, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasSsbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (float* __X7 = &X)
                {
                    var __arg7 = __X7;
                    fixed (float* __Y10 = &Y)
                    {
                        var __arg10 = __Y10;
                        __Internal.CblasSsbmv(order, Uplo, N, K, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void CblasDsbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __A5 = &A)
            {
                var __arg5 = __A5;
                fixed (double* __X7 = &X)
                {
                    var __arg7 = __X7;
                    fixed (double* __Y10 = &Y)
                    {
                        var __arg10 = __Y10;
                        __Internal.CblasDsbmv(order, Uplo, N, K, alpha, __arg5, lda, __arg7, incX, beta, __arg10, incY);
                    }
                }
            }
        }

        public static void CblasStbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (float* __X8 = &X)
                {
                    var __arg8 = __X8;
                    __Internal.CblasStbmv(order, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void CblasDtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (double* __X8 = &X)
                {
                    var __arg8 = __X8;
                    __Internal.CblasDtbmv(order, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void CblasCtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtbmv(order, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void CblasZtbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtbmv(order, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void CblasStbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, ref float A, int lda, ref float X, int incX)
        {
            fixed (float* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (float* __X8 = &X)
                {
                    var __arg8 = __X8;
                    __Internal.CblasStbsv(order, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void CblasDtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, ref double A, int lda, ref double X, int incX)
        {
            fixed (double* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (double* __X8 = &X)
                {
                    var __arg8 = __X8;
                    __Internal.CblasDtbsv(order, Uplo, TransA, Diag, N, K, __arg6, lda, __arg8, incX);
                }
            }
        }

        public static void CblasCtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtbsv(order, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void CblasZtbsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, int K, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtbsv(order, Uplo, TransA, Diag, N, K, A, lda, X, incX);
        }

        public static void CblasStpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref float Ap, ref float X, int incX)
        {
            fixed (float* __Ap5 = &Ap)
            {
                var __arg5 = __Ap5;
                fixed (float* __X6 = &X)
                {
                    var __arg6 = __X6;
                    __Internal.CblasStpmv(order, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void CblasDtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref double Ap, ref double X, int incX)
        {
            fixed (double* __Ap5 = &Ap)
            {
                var __arg5 = __Ap5;
                fixed (double* __X6 = &X)
                {
                    var __arg6 = __X6;
                    __Internal.CblasDtpmv(order, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void CblasCtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtpmv(order, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void CblasZtpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtpmv(order, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void CblasStpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref float Ap, ref float X, int incX)
        {
            fixed (float* __Ap5 = &Ap)
            {
                var __arg5 = __Ap5;
                fixed (float* __X6 = &X)
                {
                    var __arg6 = __X6;
                    __Internal.CblasStpsv(order, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void CblasDtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, ref double Ap, ref double X, int incX)
        {
            fixed (double* __Ap5 = &Ap)
            {
                var __arg5 = __Ap5;
                fixed (double* __X6 = &X)
                {
                    var __arg6 = __X6;
                    __Internal.CblasDtpsv(order, Uplo, TransA, Diag, N, __arg5, __arg6, incX);
                }
            }
        }

        public static void CblasCtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.CblasCtpsv(order, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void CblasZtpsv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int N, global::System.IntPtr Ap, global::System.IntPtr X, int incX)
        {
            __Internal.CblasZtpsv(order, Uplo, TransA, Diag, N, Ap, X, incX);
        }

        public static void CblasSsymv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float A, int lda, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __A4 = &A)
            {
                var __arg4 = __A4;
                fixed (float* __X6 = &X)
                {
                    var __arg6 = __X6;
                    fixed (float* __Y9 = &Y)
                    {
                        var __arg9 = __Y9;
                        __Internal.CblasSsymv(order, Uplo, N, alpha, __arg4, lda, __arg6, incX, beta, __arg9, incY);
                    }
                }
            }
        }

        public static void CblasDsymv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double A, int lda, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __A4 = &A)
            {
                var __arg4 = __A4;
                fixed (double* __X6 = &X)
                {
                    var __arg6 = __X6;
                    fixed (double* __Y9 = &Y)
                    {
                        var __arg9 = __Y9;
                        __Internal.CblasDsymv(order, Uplo, N, alpha, __arg4, lda, __arg6, incX, beta, __arg9, incY);
                    }
                }
            }
        }

        public static void CblasChemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasChemv(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasZhemv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasZhemv(order, Uplo, N, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasSspmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float Ap, ref float X, int incX, float beta, ref float Y, int incY)
        {
            fixed (float* __Ap4 = &Ap)
            {
                var __arg4 = __Ap4;
                fixed (float* __X5 = &X)
                {
                    var __arg5 = __X5;
                    fixed (float* __Y8 = &Y)
                    {
                        var __arg8 = __Y8;
                        __Internal.CblasSspmv(order, Uplo, N, alpha, __arg4, __arg5, incX, beta, __arg8, incY);
                    }
                }
            }
        }

        public static void CblasDspmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double Ap, ref double X, int incX, double beta, ref double Y, int incY)
        {
            fixed (double* __Ap4 = &Ap)
            {
                var __arg4 = __Ap4;
                fixed (double* __X5 = &X)
                {
                    var __arg5 = __X5;
                    fixed (double* __Y8 = &Y)
                    {
                        var __arg8 = __Y8;
                        __Internal.CblasDspmv(order, Uplo, N, alpha, __arg4, __arg5, incX, beta, __arg8, incY);
                    }
                }
            }
        }

        public static void CblasSspr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Ap)
        {
            fixed (float* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (float* __Ap6 = &Ap)
                {
                    var __arg6 = __Ap6;
                    __Internal.CblasSspr(order, Uplo, N, alpha, __arg4, incX, __arg6);
                }
            }
        }

        public static void CblasDspr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Ap)
        {
            fixed (double* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (double* __Ap6 = &Ap)
                {
                    var __arg6 = __Ap6;
                    __Internal.CblasDspr(order, Uplo, N, alpha, __arg4, incX, __arg6);
                }
            }
        }

        public static void CblasChpr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, global::System.IntPtr X, int incX, global::System.IntPtr A)
        {
            __Internal.CblasChpr(order, Uplo, N, alpha, X, incX, A);
        }

        public static void CblasZhpr(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, global::System.IntPtr X, int incX, global::System.IntPtr A)
        {
            __Internal.CblasZhpr(order, Uplo, N, alpha, X, incX, A);
        }

        public static void CblasSspr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, float alpha, ref float X, int incX, ref float Y, int incY, ref float A)
        {
            fixed (float* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (float* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (float* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasSspr2(order, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8);
                    }
                }
            }
        }

        public static void CblasDspr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, double alpha, ref double X, int incX, ref double Y, int incY, ref double A)
        {
            fixed (double* __X4 = &X)
            {
                var __arg4 = __X4;
                fixed (double* __Y6 = &Y)
                {
                    var __arg6 = __Y6;
                    fixed (double* __A8 = &A)
                    {
                        var __arg8 = __A8;
                        __Internal.CblasDspr2(order, Uplo, N, alpha, __arg4, incX, __arg6, incY, __arg8);
                    }
                }
            }
        }

        public static void CblasChpr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap)
        {
            __Internal.CblasChpr2(order, Uplo, N, alpha, X, incX, Y, incY, Ap);
        }

        public static void CblasZhpr2(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr X, int incX, global::System.IntPtr Y, int incY, global::System.IntPtr Ap)
        {
            __Internal.CblasZhpr2(order, Uplo, N, alpha, X, incX, Y, incY, Ap);
        }

        public static void CblasChbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasChbmv(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasZhbmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasZhbmv(order, Uplo, N, K, alpha, A, lda, X, incX, beta, Y, incY);
        }

        public static void CblasChpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasChpmv(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY);
        }

        public static void CblasZhpmv(global::OpenBLAS.CBLAS_ORDER order, global::OpenBLAS.CBLAS_UPLO Uplo, int N, global::System.IntPtr alpha, global::System.IntPtr Ap, global::System.IntPtr X, int incX, global::System.IntPtr beta, global::System.IntPtr Y, int incY)
        {
            __Internal.CblasZhpmv(order, Uplo, N, alpha, Ap, X, incX, beta, Y, incY);
        }

        public static void CblasSgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __A7 = &A)
            {
                var __arg7 = __A7;
                fixed (float* __B9 = &B)
                {
                    var __arg9 = __B9;
                    fixed (float* __C12 = &C)
                    {
                        var __arg12 = __C12;
                        __Internal.CblasSgemm(Order, TransA, TransB, M, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void CblasDgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __A7 = &A)
            {
                var __arg7 = __A7;
                fixed (double* __B9 = &B)
                {
                    var __arg9 = __B9;
                    fixed (double* __C12 = &C)
                    {
                        var __arg12 = __C12;
                        __Internal.CblasDgemm(Order, TransA, TransB, M, N, K, alpha, __arg7, lda, __arg9, ldb, beta, __arg12, ldc);
                    }
                }
            }
        }

        public static void CblasCgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCgemm(Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasCgemm3m(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCgemm3m(Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZgemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZgemm(Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZgemm3m(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_TRANSPOSE TransB, int M, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZgemm3m(Order, TransA, TransB, M, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasSsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (float* __B8 = &B)
                {
                    var __arg8 = __B8;
                    fixed (float* __C11 = &C)
                    {
                        var __arg11 = __C11;
                        __Internal.CblasSsymm(Order, Side, Uplo, M, N, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void CblasDsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (double* __B8 = &B)
                {
                    var __arg8 = __B8;
                    fixed (double* __C11 = &C)
                    {
                        var __arg11 = __C11;
                        __Internal.CblasDsymm(Order, Side, Uplo, M, N, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void CblasCsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCsymm(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZsymm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZsymm(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasSsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, ref float A, int lda, float beta, ref float C, int ldc)
        {
            fixed (float* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (float* __C9 = &C)
                {
                    var __arg9 = __C9;
                    __Internal.CblasSsyrk(Order, Uplo, Trans, N, K, alpha, __arg6, lda, beta, __arg9, ldc);
                }
            }
        }

        public static void CblasDsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, ref double A, int lda, double beta, ref double C, int ldc)
        {
            fixed (double* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (double* __C9 = &C)
                {
                    var __arg9 = __C9;
                    __Internal.CblasDsyrk(Order, Uplo, Trans, N, K, alpha, __arg6, lda, beta, __arg9, ldc);
                }
            }
        }

        public static void CblasCsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCsyrk(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void CblasZsyrk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZsyrk(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void CblasSsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, ref float A, int lda, ref float B, int ldb, float beta, ref float C, int ldc)
        {
            fixed (float* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (float* __B8 = &B)
                {
                    var __arg8 = __B8;
                    fixed (float* __C11 = &C)
                    {
                        var __arg11 = __C11;
                        __Internal.CblasSsyr2k(Order, Uplo, Trans, N, K, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void CblasDsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, ref double A, int lda, ref double B, int ldb, double beta, ref double C, int ldc)
        {
            fixed (double* __A6 = &A)
            {
                var __arg6 = __A6;
                fixed (double* __B8 = &B)
                {
                    var __arg8 = __B8;
                    fixed (double* __C11 = &C)
                    {
                        var __arg11 = __C11;
                        __Internal.CblasDsyr2k(Order, Uplo, Trans, N, K, alpha, __arg6, lda, __arg8, ldb, beta, __arg11, ldc);
                    }
                }
            }
        }

        public static void CblasCsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCsyr2k(Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZsyr2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZsyr2k(Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasStrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb)
        {
            fixed (float* __A8 = &A)
            {
                var __arg8 = __A8;
                fixed (float* __B10 = &B)
                {
                    var __arg10 = __B10;
                    __Internal.CblasStrmm(Order, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void CblasDtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb)
        {
            fixed (double* __A8 = &A)
            {
                var __arg8 = __A8;
                fixed (double* __B10 = &B)
                {
                    var __arg10 = __B10;
                    __Internal.CblasDtrmm(Order, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void CblasCtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.CblasCtrmm(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void CblasZtrmm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.CblasZtrmm(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void CblasStrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, float alpha, ref float A, int lda, ref float B, int ldb)
        {
            fixed (float* __A8 = &A)
            {
                var __arg8 = __A8;
                fixed (float* __B10 = &B)
                {
                    var __arg10 = __B10;
                    __Internal.CblasStrsm(Order, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void CblasDtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, double alpha, ref double A, int lda, ref double B, int ldb)
        {
            fixed (double* __A8 = &A)
            {
                var __arg8 = __A8;
                fixed (double* __B10 = &B)
                {
                    var __arg10 = __B10;
                    __Internal.CblasDtrsm(Order, Side, Uplo, TransA, Diag, M, N, alpha, __arg8, lda, __arg10, ldb);
                }
            }
        }

        public static void CblasCtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.CblasCtrsm(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void CblasZtrsm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE TransA, global::OpenBLAS.CBLAS_DIAG Diag, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb)
        {
            __Internal.CblasZtrsm(Order, Side, Uplo, TransA, Diag, M, N, alpha, A, lda, B, ldb);
        }

        public static void CblasChemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasChemm(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZhemm(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_SIDE Side, global::OpenBLAS.CBLAS_UPLO Uplo, int M, int N, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, global::System.IntPtr beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZhemm(Order, Side, Uplo, M, N, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasCherk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, float alpha, global::System.IntPtr A, int lda, float beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCherk(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void CblasZherk(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, double alpha, global::System.IntPtr A, int lda, double beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZherk(Order, Uplo, Trans, N, K, alpha, A, lda, beta, C, ldc);
        }

        public static void CblasCher2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, float beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasCher2k(Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasZher2k(global::OpenBLAS.CBLAS_ORDER Order, global::OpenBLAS.CBLAS_UPLO Uplo, global::OpenBLAS.CBLAS_TRANSPOSE Trans, int N, int K, global::System.IntPtr alpha, global::System.IntPtr A, int lda, global::System.IntPtr B, int ldb, double beta, global::System.IntPtr C, int ldc)
        {
            __Internal.CblasZher2k(Order, Uplo, Trans, N, K, alpha, A, lda, B, ldb, beta, C, ldc);
        }

        public static void CblasXerbla(int p, sbyte* rout, sbyte* form)
        {
            __Internal.CblasXerbla(p, rout, form);
        }

        /// <summary>* BLAS extensions **</summary>
        public static void CblasSaxpby(int n, float alpha, ref float x, int incx, float beta, ref float y, int incy)
        {
            fixed (float* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (float* __y5 = &y)
                {
                    var __arg5 = __y5;
                    __Internal.CblasSaxpby(n, alpha, __arg2, incx, beta, __arg5, incy);
                }
            }
        }

        public static void CblasDaxpby(int n, double alpha, ref double x, int incx, double beta, ref double y, int incy)
        {
            fixed (double* __x2 = &x)
            {
                var __arg2 = __x2;
                fixed (double* __y5 = &y)
                {
                    var __arg5 = __y5;
                    __Internal.CblasDaxpby(n, alpha, __arg2, incx, beta, __arg5, incy);
                }
            }
        }

        public static void CblasCaxpby(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy)
        {
            __Internal.CblasCaxpby(n, alpha, x, incx, beta, y, incy);
        }

        public static void CblasZaxpby(int n, global::System.IntPtr alpha, global::System.IntPtr x, int incx, global::System.IntPtr beta, global::System.IntPtr y, int incy)
        {
            __Internal.CblasZaxpby(n, alpha, x, incx, beta, y, incy);
        }

        public static void CblasSomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float calpha, ref float a, int clda, ref float b, int cldb)
        {
            fixed (float* __a5 = &a)
            {
                var __arg5 = __a5;
                fixed (float* __b7 = &b)
                {
                    var __arg7 = __b7;
                    __Internal.CblasSomatcopy(CORDER, CTRANS, crows, ccols, calpha, __arg5, clda, __arg7, cldb);
                }
            }
        }

        public static void CblasDomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double calpha, ref double a, int clda, ref double b, int cldb)
        {
            fixed (double* __a5 = &a)
            {
                var __arg5 = __a5;
                fixed (double* __b7 = &b)
                {
                    var __arg7 = __b7;
                    __Internal.CblasDomatcopy(CORDER, CTRANS, crows, ccols, calpha, __arg5, clda, __arg7, cldb);
                }
            }
        }

        public static void CblasComatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, ref float calpha, ref float a, int clda, ref float b, int cldb)
        {
            fixed (float* __calpha4 = &calpha)
            {
                var __arg4 = __calpha4;
                fixed (float* __a5 = &a)
                {
                    var __arg5 = __a5;
                    fixed (float* __b7 = &b)
                    {
                        var __arg7 = __b7;
                        __Internal.CblasComatcopy(CORDER, CTRANS, crows, ccols, __arg4, __arg5, clda, __arg7, cldb);
                    }
                }
            }
        }

        public static void CblasZomatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, ref double calpha, ref double a, int clda, ref double b, int cldb)
        {
            fixed (double* __calpha4 = &calpha)
            {
                var __arg4 = __calpha4;
                fixed (double* __a5 = &a)
                {
                    var __arg5 = __a5;
                    fixed (double* __b7 = &b)
                    {
                        var __arg7 = __b7;
                        __Internal.CblasZomatcopy(CORDER, CTRANS, crows, ccols, __arg4, __arg5, clda, __arg7, cldb);
                    }
                }
            }
        }

        public static void CblasSimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, float calpha, ref float a, int clda, int cldb)
        {
            fixed (float* __a5 = &a)
            {
                var __arg5 = __a5;
                __Internal.CblasSimatcopy(CORDER, CTRANS, crows, ccols, calpha, __arg5, clda, cldb);
            }
        }

        public static void CblasDimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, double calpha, ref double a, int clda, int cldb)
        {
            fixed (double* __a5 = &a)
            {
                var __arg5 = __a5;
                __Internal.CblasDimatcopy(CORDER, CTRANS, crows, ccols, calpha, __arg5, clda, cldb);
            }
        }

        public static void CblasCimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, ref float calpha, ref float a, int clda, int cldb)
        {
            fixed (float* __calpha4 = &calpha)
            {
                var __arg4 = __calpha4;
                fixed (float* __a5 = &a)
                {
                    var __arg5 = __a5;
                    __Internal.CblasCimatcopy(CORDER, CTRANS, crows, ccols, __arg4, __arg5, clda, cldb);
                }
            }
        }

        public static void CblasZimatcopy(global::OpenBLAS.CBLAS_ORDER CORDER, global::OpenBLAS.CBLAS_TRANSPOSE CTRANS, int crows, int ccols, ref double calpha, ref double a, int clda, int cldb)
        {
            fixed (double* __calpha4 = &calpha)
            {
                var __arg4 = __calpha4;
                fixed (double* __a5 = &a)
                {
                    var __arg5 = __a5;
                    __Internal.CblasZimatcopy(CORDER, CTRANS, crows, ccols, __arg4, __arg5, clda, cldb);
                }
            }
        }

        public static void CblasSgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, float calpha, ref float a, int clda, float cbeta, ref float c, int cldc)
        {
            fixed (float* __a4 = &a)
            {
                var __arg4 = __a4;
                fixed (float* __c7 = &c)
                {
                    var __arg7 = __c7;
                    __Internal.CblasSgeadd(CORDER, crows, ccols, calpha, __arg4, clda, cbeta, __arg7, cldc);
                }
            }
        }

        public static void CblasDgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, double calpha, ref double a, int clda, double cbeta, ref double c, int cldc)
        {
            fixed (double* __a4 = &a)
            {
                var __arg4 = __a4;
                fixed (double* __c7 = &c)
                {
                    var __arg7 = __c7;
                    __Internal.CblasDgeadd(CORDER, crows, ccols, calpha, __arg4, clda, cbeta, __arg7, cldc);
                }
            }
        }

        public static void CblasCgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, ref float calpha, ref float a, int clda, ref float cbeta, ref float c, int cldc)
        {
            fixed (float* __calpha3 = &calpha)
            {
                var __arg3 = __calpha3;
                fixed (float* __a4 = &a)
                {
                    var __arg4 = __a4;
                    fixed (float* __cbeta6 = &cbeta)
                    {
                        var __arg6 = __cbeta6;
                        fixed (float* __c7 = &c)
                        {
                            var __arg7 = __c7;
                            __Internal.CblasCgeadd(CORDER, crows, ccols, __arg3, __arg4, clda, __arg6, __arg7, cldc);
                        }
                    }
                }
            }
        }

        public static void CblasZgeadd(global::OpenBLAS.CBLAS_ORDER CORDER, int crows, int ccols, ref double calpha, ref double a, int clda, ref double cbeta, ref double c, int cldc)
        {
            fixed (double* __calpha3 = &calpha)
            {
                var __arg3 = __calpha3;
                fixed (double* __a4 = &a)
                {
                    var __arg4 = __a4;
                    fixed (double* __cbeta6 = &cbeta)
                    {
                        var __arg6 = __cbeta6;
                        fixed (double* __c7 = &c)
                        {
                            var __arg7 = __c7;
                            __Internal.CblasZgeadd(CORDER, crows, ccols, __arg3, __arg4, clda, __arg6, __arg7, cldc);
                        }
                    }
                }
            }
        }
    }
}
